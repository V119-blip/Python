{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "please enter a num:5000\n",
      "please enter the quality2\n",
      "500.0\n"
     ]
    }
   ],
   "source": [
    "#QUESTION 1:\n",
    "a=int(input(\"please enter a num:\"))\n",
    "b=int(input(\"please enter the quality\"))\n",
    "\n",
    "if(b==1):\n",
    "        tip1=a*0.05\n",
    "        print(tip1)\n",
    "elif(b==2):\n",
    "        tip2=a*0.1\n",
    "        print(tip2)\n",
    "elif(b==3):\n",
    "        tip3=a*0.15\n",
    "        print(tip3)\n",
    "elif(b==4):\n",
    "        tip4=a*0.2\n",
    "        print(tip4)\n",
    "else:\n",
    "        tip5=a*0.25\n",
    "        print(tip5)\n",
    "        \n",
    "    \n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "please enter the amount:4500\n",
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#QUESTION 2:\n",
    "num=int(input(\"please enter the amount:\"))\n",
    "b=[10,20,50,100,200,500,2000]\n",
    "for value in b:\n",
    "    count=0\n",
    "while(num>=10):\n",
    "        num=num//10\n",
    "        count=count+1\n",
    "        print(count)\n",
    "while(num>=20):\n",
    "        num=num//20\n",
    "        count=count+1\n",
    "        print(count)\n",
    "while(num>=50):\n",
    "        num=num//50\n",
    "        count=count+1\n",
    "        print(count)    \n",
    "while(num>=100):\n",
    "        num=num//100\n",
    "        count=count+1\n",
    "        print(count)\n",
    "while(num>=200):\n",
    "        num=num//200\n",
    "        count=count+1\n",
    "        print(count)\n",
    "while(num>=500):\n",
    "        num=num//500\n",
    "        count=count+1\n",
    "        print(count)\n",
    "while(num>=2000):\n",
    "        num=num//2000\n",
    "        count=count+1\n",
    "        print(count)\n",
    "     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter n:50\n",
      "sequence: 50 25 76 38 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 "
     ]
    }
   ],
   "source": [
    "#QUESTION 3\n",
    "def collatz(n):\n",
    "    while n>1:\n",
    "        print(n,end=' ')\n",
    "        if(n%2):\n",
    "            n=3*n+1\n",
    "        else:\n",
    "            n=n//2\n",
    "    print(1,end=' ')\n",
    "n=int(input('enter n:'))\n",
    "print('sequence:',end=' ')\n",
    "collatz(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUESTION 4\n",
    "s1= input(\"enter the first string:\")\n",
    "s2= input(\"enter the second string:\")\n",
    "if(sorted(s1)==sorted(s2)):\n",
    "    print(\"the strings are anagrams\")\n",
    "else:\n",
    "    print(\"the strings are not anagrams\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#QUESTION 6\n",
    "def twoSum(arr, S):\n",
    "\n",
    "  sums=0\n",
    "  for i in range(0, len(arr)):\n",
    "\n",
    "    \n",
    "    for j in range(i+1, len(arr)):\n",
    "\n",
    "      \n",
    "      if (arr[i] + arr[j] == S):\n",
    "        sums.append([arr[i], arr[j]])\n",
    "\n",
    "  \n",
    "  return sums\n",
    "\n",
    "\n",
    "                \n",
    "  \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the first string:ab\n",
      "enter the second string:cd\n",
      "enter the third string:dfgh\n",
      "s3 is not shuffled\n"
     ]
    }
   ],
   "source": [
    "#QUESTION 7\n",
    "\n",
    "s1= input(\"enter the first string:\")\n",
    "s2= input(\"enter the second string:\")\n",
    "s3= input(\"enter the third string:\")\n",
    "i=0\n",
    "j=0\n",
    "k=0\n",
    "while k != len(s3)-1:\n",
    "    if i<len(s1) and s1[i] == s3[k]: \n",
    "            i+=1\n",
    "    elif j< len(s2) and s2[j] == s3[k]: \n",
    "            j+=1\n",
    "    else: \n",
    "            k+=1\n",
    "if (s1, s2, s3) == 1: \n",
    "    print (\"s3 is shuffled\" )\n",
    "else: \n",
    "    print (\"s3 is not shuffled\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
